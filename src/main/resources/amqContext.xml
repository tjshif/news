<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-4.1.xsd">

    <!-- 扫描service、dao组件 -->
    <context:component-scan base-package="com.school" />

    <!-- 分解配置 jdbc.properites -->
    <context:property-placeholder location="file:${catalina.home}/config/news-env.properties"/>

    <!-- 这里采用连接池的方式连接PooledConnectionFactoryBean -->
    <bean id="targetConnectionFactory" class="org.apache.activemq.ActiveMQConnectionFactory">
        <property name="brokerURL" value="${activemq_url}"/>
    </bean>

    <bean id="pooledConnectionFactory" class="org.apache.activemq.pool.PooledConnectionFactory"  destroy-method="stop" lazy-init="true">
        <property name="connectionFactory" ref="targetConnectionFactory"/>
        <property name="maxConnections" value="30"/>
    </bean>

    <!-- Spring提供的JMS工具类，它可以进行消息发送、接收等 -->
    <bean id="jmsTemplate" class="org.springframework.jms.core.JmsTemplate">
        <!-- 这个connectionFactory对应的是我们定义的Spring提供的那个ConnectionFactory对象 -->
        <property name="connectionFactory" ref="pooledConnectionFactory"/>
    </bean>

    <!-- 定义消息队列queue -->
    <bean id="queuepostmsgDestination" class="org.apache.activemq.command.ActiveMQQueue">
        <constructor-arg>
            <value>postmsg.storetodb.queue</value>
        </constructor-arg>
    </bean>

    <!-- 监听方式，这种方式更实用，可以一直监听消息 -->
    <bean id="defaultMessageListenerContainer" class="org.springframework.jms.listener.DefaultMessageListenerContainer">
        <property name="connectionFactory" ref="targetConnectionFactory"/>
        <!-- 注册activemq名称 -->
        <property name="destination" ref="queuepostmsgDestination"/>
        <property name="messageListener" ref="consumePostMsgToDBListener"/>
    </bean>

    <!--counter message queue-->
    <bean id="queueCounterMsgDestination" class="org.apache.activemq.command.ActiveMQQueue">
        <constructor-arg>
            <value>counterMsg.storetodb.queue</value>
        </constructor-arg>
    </bean>
    <!-- 监听方式，这种方式更实用，可以一直监听消息 -->
    <bean class="org.springframework.jms.listener.DefaultMessageListenerContainer">
        <property name="connectionFactory" ref="targetConnectionFactory"/>
        <!-- 注册activemq名称 -->
        <property name="destination" ref="queueCounterMsgDestination"/>
        <property name="messageListener" ref="consumeCounterMsgToDBListener"/>
    </bean>

    <!--load to redis by id message queue-->
    <bean id="queueLoadToRedisMsgDestination" class="org.apache.activemq.command.ActiveMQQueue">
        <constructor-arg>
            <value>loadToRedisMsg.storetoredis.queue</value>
        </constructor-arg>
    </bean>
    <!-- 监听方式，这种方式更实用，可以一直监听消息 -->
    <bean class="org.springframework.jms.listener.DefaultMessageListenerContainer">
        <property name="connectionFactory" ref="targetConnectionFactory"/>
        <!-- 注册activemq名称 -->
        <property name="destination" ref="queueLoadToRedisMsgDestination"/>
        <property name="messageListener" ref="consumeLoadToRedisMsgToDBListener"/>
    </bean>
</beans>